import { useState,useEffect } from "react";

import { useRouter } from "next/router";
import Image from "next/image";
import Head from "next/head";
import { Formik, Form, Field } from 'formik';
import Swal from 'sweetalert2';

const Init = () => {

  const router = useRouter();
  const [logged,setLogged] = useState(null)
  
  useEffect(() => {
    if (localStorage.getItem("name")) {
      let visit = localStorage.getItem("name")
      setLogged(visit)
    }
    
    logged ? router.push("/home") : ""

  },[logged])

  var aux = [];
  var codes = ["432765", "897654", "532176"];
  
  const [numberCode, setNumberCode] = useState("");
  const [hidden, setHidden] = useState(false);
  const [name, setName] = useState("")
  const [codeRandom, setCodeRandom] = useState("");

  const Toast = Swal.mixin({
    toast: true,
    position: 'top-end',
    showConfirmButton: false,
    timer: 1000,
    timerProgressBar: true,
    didOpen: (toast) => {
      toast.addEventListener('mouseenter', Swal.stopTimer)
      toast.addEventListener('mouseleave', Swal.resumeTimer)
    }
  })
  
  const handleChange = (e) => setNumberCode(numberCode.concat(e));

  const handleErase = () =>
    setNumberCode(numberCode.substring(0, numberCode.length - 1));

  const handleEnter = (name) => {
    if (
      numberCode === "432765" ||
      numberCode === "897654" ||
      numberCode === "532176"
    ) {
      let storage = localStorage.getItem("name");
      if (storage) {
        localStorage.clear();
        localStorage.setItem("name", name);
      } else {
        localStorage.setItem("name", name);
      }

      Toast.fire({
        icon: 'success',
        title: 'Well Done!'
      })
      .then(() => {
          router.push({pathname:"/home"});
      })

    } else {
      Swal.fire({
        icon: 'error',
        html: `<p>sorry something wrong</p>`,
        confirmButtonText: 'try again'
      });
    }
  };

  const code = () => {
    var aleatorio = Math.random() * codes.length;
    var aux = Math.floor(aleatorio);
    setCodeRandom(codes[aux]);
  };

  return (
    <div className="container">
      <Head>
        <title>Matias Flores</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>Hi! my name is Matias Flores</h1>
        <h2>Welcome to my portfolio</h2>
        <div>
          <div>
            <div className={hidden ? "hiddenCode" : "displayName"}>
              <Formik
                initialValues={{
                  name: ''
                }}
                validate={(fields) => {
                  let errors = {}

                  if(!fields.name){
                    errors.name = 'Please insert name to continue'
                  }else if(!/^[a-zA-ZÀ-ÿ\s]{1,40}$/.test(fields.name)){
                    errors.name = 'The name can only contain letters and spaces'
                  }

                  return errors
                }}
                onSubmit={(fields) => {
                  if (fields.name) {
                    setName(fields.name)
                    setHidden(true);
                  }
                }}
              >
                {({ touched,errors }) => (
                  <Form>
                      <label className="titleInput">What your name?</label>
                      <Field
                        className="inputName"
                        name="name"
                        placeholder="John Doeh"
                        type="text"
                      />
                      {touched.name && errors.name ? <p className="errors">{errors.name}</p> : ""}

                      <button className="send" type="submit" onClick={code}>
                        Send
                      </button>
                  </Form>
                )}
              </Formik>
            </div>
            <div className={hidden ? "displayCode" : "hiddenCode"}>
              <label className="titleInput">your code is {codeRandom}</label>
              <input disabled value={numberCode} className="inputCode" />
            </div>
            <div className={hidden ? "buttons" : "hiddenCode"}>
              <ul className="slideRight">
                <li onClick={() => handleChange("1")}>1</li>
                <li onClick={() => handleChange("2")}>2</li>
                <li onClick={() => handleChange("3")}>3</li>
              </ul>
              <ul className="slideRight">
                <li onClick={() => handleChange("4")}>4</li>
                <li onClick={() => handleChange("5")}>5</li>
                <li onClick={() => handleChange("6")}>6</li>
              </ul>
              <ul className="slideRight">
                <li onClick={() => handleChange("7")}>7</li>
                <li onClick={() => handleChange("8")}>8</li>
                <li onClick={() => handleChange("9")}>9</li>
              </ul>
              <ul className="slideRight">
                <li onClick={handleErase}>erase</li>
                <li onClick={() => handleChange("0")}>0</li>
                <li onClick={() => handleEnter(name)}>enter</li>
              </ul>
            </div>
          </div>
        </div>
      </main>

      <footer>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export default Init;
